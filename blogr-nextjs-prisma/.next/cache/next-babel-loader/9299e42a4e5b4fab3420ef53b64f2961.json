{"ast":null,"code":"var _jsxFileName = \"/Users/rjshoemaker/Documents/code/practice/nextjs-postgres-prisma/blogr-nextjs-prisma/pages/p/[id].tsx\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport Layout from '../../components/Layout';\nimport prisma from '../../lib/prisma';\nimport Router from 'next/router';\nimport { useSession } from 'next-auth/client';\nexport const getServerSideProps = async ({\n  params\n}) => {\n  const post = await prisma.post.findUnique({\n    where: {\n      id: Number(params === null || params === void 0 ? void 0 : params.id) || -1\n    },\n    include: {\n      author: {\n        select: {\n          name: true,\n          email: true\n        }\n      }\n    }\n  });\n  return {\n    props: post\n  };\n};\n\nasync function publishPost(id) {\n  await fetch(`http://localhost:3000/api/publish/${id}`, {\n    method: 'PUT'\n  });\n  await Router.push('/');\n}\n\nconst Post = props => {\n  var _session$user, _props$author, _props$author2;\n\n  console.log(props.id);\n  const [session, loading] = useSession();\n\n  if (loading) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 12\n      }\n    }, \"Authenticating...\");\n  }\n\n  const userHasValidSession = Boolean(session);\n  const postBelongsToUser = (session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.email) === ((_props$author = props.author) === null || _props$author === void 0 ? void 0 : _props$author.email);\n  let title = props.title;\n\n  if (!props.published) {\n    title = `${title} (Draft)`;\n  }\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"jsx-3440979688\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    className: \"jsx-3440979688\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, title), __jsx(\"p\", {\n    className: \"jsx-3440979688\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"By \", (props === null || props === void 0 ? void 0 : (_props$author2 = props.author) === null || _props$author2 === void 0 ? void 0 : _props$author2.name) || 'Unknown author'), __jsx(ReactMarkdown, {\n    source: props.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), !props.published && userHasValidSession && postBelongsToUser && __jsx(\"button\", {\n    onClick: () => publishPost(props.id),\n    className: \"jsx-3440979688\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, \"Publish\")), __jsx(_JSXStyle, {\n    id: \"3440979688\",\n    __self: this\n  }, \".page.jsx-3440979688{background:white;padding:2rem;}.actions.jsx-3440979688{margin-top:2rem;}button.jsx-3440979688{background:#ececec;border:0;border-radius:0.125rem;padding:1rem 2rem;}button.jsx-3440979688+button.jsx-3440979688{margin-left:1rem;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yanNob2VtYWtlci9Eb2N1bWVudHMvY29kZS9wcmFjdGljZS9uZXh0anMtcG9zdGdyZXMtcHJpc21hL2Jsb2dyLW5leHRqcy1wcmlzbWEvcGFnZXMvcC9baWRdLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwRGtCLEFBRzRCLEFBS0QsQUFJRyxBQU9GLGdCQVZuQixDQUxlLEFBZ0JmLEVBUFcsU0FDYyxFQVR6QixxQkFVb0Isa0JBQ3BCIiwiZmlsZSI6Ii9Vc2Vycy9yanNob2VtYWtlci9Eb2N1bWVudHMvY29kZS9wcmFjdGljZS9uZXh0anMtcG9zdGdyZXMtcHJpc21hL2Jsb2dyLW5leHRqcy1wcmlzbWEvcGFnZXMvcC9baWRdLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEdldFNlcnZlclNpZGVQcm9wcyB9IGZyb20gJ25leHQnXG5pbXBvcnQgUmVhY3RNYXJrZG93biBmcm9tICdyZWFjdC1tYXJrZG93bidcbmltcG9ydCBMYXlvdXQgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9MYXlvdXQnXG5pbXBvcnQgeyBQb3N0UHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL1Bvc3QnXG5pbXBvcnQgcHJpc21hIGZyb20gJy4uLy4uL2xpYi9wcmlzbWEnXG5pbXBvcnQgUm91dGVyIGZyb20gJ25leHQvcm91dGVyJ1xuaW1wb3J0IHsgdXNlU2Vzc2lvbiB9IGZyb20gJ25leHQtYXV0aC9jbGllbnQnXG5cbmV4cG9ydCBjb25zdCBnZXRTZXJ2ZXJTaWRlUHJvcHM6IEdldFNlcnZlclNpZGVQcm9wcyA9IGFzeW5jICh7IHBhcmFtcyB9KSA9PiB7XG4gIGNvbnN0IHBvc3QgPSBhd2FpdCBwcmlzbWEucG9zdC5maW5kVW5pcXVlKHtcbiAgICB3aGVyZTogeyBpZDogTnVtYmVyKHBhcmFtcz8uaWQpIHx8IC0xIH0sXG4gICAgaW5jbHVkZToge1xuICAgICAgYXV0aG9yOiB7XG4gICAgICAgIHNlbGVjdDogeyBuYW1lOiB0cnVlLCBlbWFpbDogdHJ1ZSB9XG4gICAgICB9XG4gICAgfVxuICB9KVxuICByZXR1cm4ge1xuICAgIHByb3BzOiBwb3N0XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gcHVibGlzaFBvc3QoaWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICBhd2FpdCBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9wdWJsaXNoLyR7aWR9YCwge1xuICAgIG1ldGhvZDogJ1BVVCdcbiAgfSlcblxuICBhd2FpdCBSb3V0ZXIucHVzaCgnLycpXG59XG5cbmNvbnN0IFBvc3Q6IFJlYWN0LkZDPFBvc3RQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc29sZS5sb2cocHJvcHMuaWQpXG4gIGNvbnN0IFtzZXNzaW9uLCBsb2FkaW5nXSA9IHVzZVNlc3Npb24oKVxuICBpZiAobG9hZGluZykge1xuICAgIHJldHVybiA8ZGl2PkF1dGhlbnRpY2F0aW5nLi4uPC9kaXY+XG4gIH1cbiAgY29uc3QgdXNlckhhc1ZhbGlkU2Vzc2lvbiA9IEJvb2xlYW4oc2Vzc2lvbilcblxuICBjb25zdCBwb3N0QmVsb25nc1RvVXNlciA9IHNlc3Npb24/LnVzZXI/LmVtYWlsID09PSBwcm9wcy5hdXRob3I/LmVtYWlsXG5cbiAgbGV0IHRpdGxlID0gcHJvcHMudGl0bGVcbiAgaWYgKCFwcm9wcy5wdWJsaXNoZWQpIHtcbiAgICB0aXRsZSA9IGAke3RpdGxlfSAoRHJhZnQpYFxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8TGF5b3V0PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGgyPnt0aXRsZX08L2gyPlxuICAgICAgICA8cD5CeSB7cHJvcHM/LmF1dGhvcj8ubmFtZSB8fCAnVW5rbm93biBhdXRob3InfTwvcD5cblxuICAgICAgICA8UmVhY3RNYXJrZG93biBzb3VyY2U9e3Byb3BzLmNvbnRlbnR9IC8+XG5cbiAgICAgICAgeyFwcm9wcy5wdWJsaXNoZWQgJiYgdXNlckhhc1ZhbGlkU2Vzc2lvbiAmJiBwb3N0QmVsb25nc1RvVXNlciAmJiAoXG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBwdWJsaXNoUG9zdChwcm9wcy5pZCl9PlB1Ymxpc2g8L2J1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAucGFnZSB7XG4gICAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICAgICAgcGFkZGluZzogMnJlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5hY3Rpb25zIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgICAgICB9XG5cbiAgICAgICAgYnV0dG9uIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjZWNlY2VjO1xuICAgICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAwLjEyNXJlbTtcbiAgICAgICAgICBwYWRkaW5nOiAxcmVtIDJyZW07XG4gICAgICAgIH1cblxuICAgICAgICBidXR0b24gKyBidXR0b24ge1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxcmVtO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9MYXlvdXQ+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9zdFxuIl19 */\\n/*@ sourceURL=/Users/rjshoemaker/Documents/code/practice/nextjs-postgres-prisma/blogr-nextjs-prisma/pages/p/[id].tsx */\"));\n};\n\nexport default Post;","map":{"version":3,"sources":["/Users/rjshoemaker/Documents/code/practice/nextjs-postgres-prisma/blogr-nextjs-prisma/pages/p/[id].tsx"],"names":["React","ReactMarkdown","Layout","prisma","Router","useSession","getServerSideProps","params","post","findUnique","where","id","Number","include","author","select","name","email","props","publishPost","fetch","method","push","Post","console","log","session","loading","userHasValidSession","Boolean","postBelongsToUser","user","title","published","content"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,MAAMC,kBAAsC,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAsB;AAC1E,QAAMC,IAAI,GAAG,MAAML,MAAM,CAACK,IAAP,CAAYC,UAAZ,CAAuB;AACxCC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,EAAE,EAAEC,MAAM,CAACL,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEI,EAAT,CAAN,IAAsB,CAAC;AAA7B,KADiC;AAExCE,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAE,IAAR;AAAcC,UAAAA,KAAK,EAAE;AAArB;AADF;AADD;AAF+B,GAAvB,CAAnB;AAQA,SAAO;AACLC,IAAAA,KAAK,EAAEV;AADF,GAAP;AAGD,CAZM;;AAcP,eAAeW,WAAf,CAA2BR,EAA3B,EAAsD;AACpD,QAAMS,KAAK,CAAE,qCAAoCT,EAAG,EAAzC,EAA4C;AACrDU,IAAAA,MAAM,EAAE;AAD6C,GAA5C,CAAX;AAIA,QAAMjB,MAAM,CAACkB,IAAP,CAAY,GAAZ,CAAN;AACD;;AAED,MAAMC,IAAyB,GAAIL,KAAD,IAAW;AAAA;;AAC3CM,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACP,EAAlB;AACA,QAAM,CAACe,OAAD,EAAUC,OAAV,IAAqBtB,UAAU,EAArC;;AACA,MAAIsB,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAP;AACD;;AACD,QAAMC,mBAAmB,GAAGC,OAAO,CAACH,OAAD,CAAnC;AAEA,QAAMI,iBAAiB,GAAG,CAAAJ,OAAO,SAAP,IAAAA,OAAO,WAAP,6BAAAA,OAAO,CAAEK,IAAT,gEAAed,KAAf,wBAAyBC,KAAK,CAACJ,MAA/B,kDAAyB,cAAcG,KAAvC,CAA1B;AAEA,MAAIe,KAAK,GAAGd,KAAK,CAACc,KAAlB;;AACA,MAAI,CAACd,KAAK,CAACe,SAAX,EAAsB;AACpBD,IAAAA,KAAK,GAAI,GAAEA,KAAM,UAAjB;AACD;;AAED,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAO,CAAAd,KAAK,SAAL,IAAAA,KAAK,WAAL,8BAAAA,KAAK,CAAEJ,MAAP,kEAAeE,IAAf,KAAuB,gBAA9B,CAFF,EAIE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEE,KAAK,CAACgB,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAMG,CAAChB,KAAK,CAACe,SAAP,IAAoBL,mBAApB,IAA2CE,iBAA3C,IACC;AAAQ,IAAA,OAAO,EAAE,MAAMX,WAAW,CAACD,KAAK,CAACP,EAAP,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAPJ,CADF;AAAA;AAAA;AAAA,kjHADF;AAmCD,CAlDD;;AAoDA,eAAeY,IAAf","sourcesContent":["import React from 'react'\nimport { GetServerSideProps } from 'next'\nimport ReactMarkdown from 'react-markdown'\nimport Layout from '../../components/Layout'\nimport { PostProps } from '../../components/Post'\nimport prisma from '../../lib/prisma'\nimport Router from 'next/router'\nimport { useSession } from 'next-auth/client'\n\nexport const getServerSideProps: GetServerSideProps = async ({ params }) => {\n  const post = await prisma.post.findUnique({\n    where: { id: Number(params?.id) || -1 },\n    include: {\n      author: {\n        select: { name: true, email: true }\n      }\n    }\n  })\n  return {\n    props: post\n  }\n}\n\nasync function publishPost(id: number): Promise<void> {\n  await fetch(`http://localhost:3000/api/publish/${id}`, {\n    method: 'PUT'\n  })\n\n  await Router.push('/')\n}\n\nconst Post: React.FC<PostProps> = (props) => {\n  console.log(props.id)\n  const [session, loading] = useSession()\n  if (loading) {\n    return <div>Authenticating...</div>\n  }\n  const userHasValidSession = Boolean(session)\n\n  const postBelongsToUser = session?.user?.email === props.author?.email\n\n  let title = props.title\n  if (!props.published) {\n    title = `${title} (Draft)`\n  }\n\n  return (\n    <Layout>\n      <div>\n        <h2>{title}</h2>\n        <p>By {props?.author?.name || 'Unknown author'}</p>\n\n        <ReactMarkdown source={props.content} />\n\n        {!props.published && userHasValidSession && postBelongsToUser && (\n          <button onClick={() => publishPost(props.id)}>Publish</button>\n        )}\n      </div>\n      <style jsx>{`\n        .page {\n          background: white;\n          padding: 2rem;\n        }\n\n        .actions {\n          margin-top: 2rem;\n        }\n\n        button {\n          background: #ececec;\n          border: 0;\n          border-radius: 0.125rem;\n          padding: 1rem 2rem;\n        }\n\n        button + button {\n          margin-left: 1rem;\n        }\n      `}</style>\n    </Layout>\n  )\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}