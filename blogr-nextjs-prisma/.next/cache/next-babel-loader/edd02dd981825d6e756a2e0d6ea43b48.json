{"ast":null,"code":"var _jsxFileName = \"/Users/rjshoemaker/Documents/code/practice/nextjs-postgres-prisma/blogr-nextjs-prisma/pages/p/[id].tsx\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport Layout from '../../components/Layout';\nimport prisma from '../../lib/prisma';\nimport Router from 'next/router';\nimport { useSession } from 'next-auth/client';\nexport const getServerSideProps = async ({\n  params\n}) => {\n  const post = await prisma.post.findUnique({\n    where: {\n      id: Number(params === null || params === void 0 ? void 0 : params.id) || -1\n    },\n    include: {\n      author: {\n        select: {\n          name: true\n        }\n      }\n    }\n  });\n  return {\n    props: post\n  };\n};\n\nasync function publishPost(id) {\n  await fetch('http://localhost:3000/api/publish/${id}', {\n    method: 'PUT'\n  });\n  await Router.push('/');\n}\n\nconst Post = props => {\n  var _session$user, _props$author, _props$author2;\n\n  const [session, loading] = useSession();\n\n  if (loading) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 12\n      }\n    }, \"Authenticating...\");\n  }\n\n  const userHasValidSession = Boolean(session);\n  const postBelongsToUser = (session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.email) === ((_props$author = props.author) === null || _props$author === void 0 ? void 0 : _props$author.email);\n  console.log(!props.published, userHasValidSession, postBelongsToUser);\n  let title = props.title;\n\n  if (!props.published) {\n    title = `${title} (Draft)`;\n  }\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"jsx-3440979688\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    className: \"jsx-3440979688\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, title), __jsx(\"p\", {\n    className: \"jsx-3440979688\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"By \", (props === null || props === void 0 ? void 0 : (_props$author2 = props.author) === null || _props$author2 === void 0 ? void 0 : _props$author2.name) || 'Unknown author'), __jsx(ReactMarkdown, {\n    source: props.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), !props.published && userHasValidSession && postBelongsToUser && __jsx(\"button\", {\n    onClick: () => publishPost(props.id),\n    className: \"jsx-3440979688\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \"Publish\")), __jsx(_JSXStyle, {\n    id: \"3440979688\",\n    __self: this\n  }, \".page.jsx-3440979688{background:white;padding:2rem;}.actions.jsx-3440979688{margin-top:2rem;}button.jsx-3440979688{background:#ececec;border:0;border-radius:0.125rem;padding:1rem 2rem;}button.jsx-3440979688+button.jsx-3440979688{margin-left:1rem;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yanNob2VtYWtlci9Eb2N1bWVudHMvY29kZS9wcmFjdGljZS9uZXh0anMtcG9zdGdyZXMtcHJpc21hL2Jsb2dyLW5leHRqcy1wcmlzbWEvcGFnZXMvcC9baWRdLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3RGtCLEFBRzRCLEFBS0QsQUFJRyxBQU9GLGdCQVZuQixDQUxlLEFBZ0JmLEVBUFcsU0FDYyxFQVR6QixxQkFVb0Isa0JBQ3BCIiwiZmlsZSI6Ii9Vc2Vycy9yanNob2VtYWtlci9Eb2N1bWVudHMvY29kZS9wcmFjdGljZS9uZXh0anMtcG9zdGdyZXMtcHJpc21hL2Jsb2dyLW5leHRqcy1wcmlzbWEvcGFnZXMvcC9baWRdLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEdldFNlcnZlclNpZGVQcm9wcyB9IGZyb20gJ25leHQnXG5pbXBvcnQgUmVhY3RNYXJrZG93biBmcm9tICdyZWFjdC1tYXJrZG93bidcbmltcG9ydCBMYXlvdXQgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9MYXlvdXQnXG5pbXBvcnQgeyBQb3N0UHJvcHMgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL1Bvc3QnXG5pbXBvcnQgcHJpc21hIGZyb20gJy4uLy4uL2xpYi9wcmlzbWEnXG5pbXBvcnQgUm91dGVyIGZyb20gJ25leHQvcm91dGVyJ1xuaW1wb3J0IHsgdXNlU2Vzc2lvbiB9IGZyb20gJ25leHQtYXV0aC9jbGllbnQnXG5cbmV4cG9ydCBjb25zdCBnZXRTZXJ2ZXJTaWRlUHJvcHM6IEdldFNlcnZlclNpZGVQcm9wcyA9IGFzeW5jICh7IHBhcmFtcyB9KSA9PiB7XG4gIGNvbnN0IHBvc3QgPSBhd2FpdCBwcmlzbWEucG9zdC5maW5kVW5pcXVlKHtcbiAgICB3aGVyZTogeyBpZDogTnVtYmVyKHBhcmFtcz8uaWQpIHx8IC0xIH0sXG4gICAgaW5jbHVkZToge1xuICAgICAgYXV0aG9yOiB7XG4gICAgICAgIHNlbGVjdDogeyBuYW1lOiB0cnVlIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pXG4gIHJldHVybiB7XG4gICAgcHJvcHM6IHBvc3RcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBwdWJsaXNoUG9zdChpZDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gIGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3B1Ymxpc2gvJHtpZH0nLCB7XG4gICAgbWV0aG9kOiAnUFVUJ1xuICB9KVxuXG4gIGF3YWl0IFJvdXRlci5wdXNoKCcvJylcbn1cblxuY29uc3QgUG9zdDogUmVhY3QuRkM8UG9zdFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCBbc2Vzc2lvbiwgbG9hZGluZ10gPSB1c2VTZXNzaW9uKClcbiAgaWYgKGxvYWRpbmcpIHtcbiAgICByZXR1cm4gPGRpdj5BdXRoZW50aWNhdGluZy4uLjwvZGl2PlxuICB9XG4gIGNvbnN0IHVzZXJIYXNWYWxpZFNlc3Npb24gPSBCb29sZWFuKHNlc3Npb24pXG4gIGNvbnN0IHBvc3RCZWxvbmdzVG9Vc2VyID0gc2Vzc2lvbj8udXNlcj8uZW1haWwgPT09IHByb3BzLmF1dGhvcj8uZW1haWxcblxuICBjb25zb2xlLmxvZyghcHJvcHMucHVibGlzaGVkLCB1c2VySGFzVmFsaWRTZXNzaW9uLCBwb3N0QmVsb25nc1RvVXNlcilcblxuICBsZXQgdGl0bGUgPSBwcm9wcy50aXRsZVxuICBpZiAoIXByb3BzLnB1Ymxpc2hlZCkge1xuICAgIHRpdGxlID0gYCR7dGl0bGV9IChEcmFmdClgXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxMYXlvdXQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8aDI+e3RpdGxlfTwvaDI+XG4gICAgICAgIDxwPkJ5IHtwcm9wcz8uYXV0aG9yPy5uYW1lIHx8ICdVbmtub3duIGF1dGhvcid9PC9wPlxuICAgICAgICA8UmVhY3RNYXJrZG93biBzb3VyY2U9e3Byb3BzLmNvbnRlbnR9IC8+XG4gICAgICAgIHshcHJvcHMucHVibGlzaGVkICYmIHVzZXJIYXNWYWxpZFNlc3Npb24gJiYgcG9zdEJlbG9uZ3NUb1VzZXIgJiYgKFxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gcHVibGlzaFBvc3QocHJvcHMuaWQpfT5QdWJsaXNoPC9idXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLnBhZ2Uge1xuICAgICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgICAgIHBhZGRpbmc6IDJyZW07XG4gICAgICAgIH1cblxuICAgICAgICAuYWN0aW9ucyB7XG4gICAgICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1dHRvbiB7XG4gICAgICAgICAgYmFja2dyb3VuZDogI2VjZWNlYztcbiAgICAgICAgICBib3JkZXI6IDA7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMC4xMjVyZW07XG4gICAgICAgICAgcGFkZGluZzogMXJlbSAycmVtO1xuICAgICAgICB9XG5cbiAgICAgICAgYnV0dG9uICsgYnV0dG9uIHtcbiAgICAgICAgICBtYXJnaW4tbGVmdDogMXJlbTtcbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgIDwvTGF5b3V0PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvc3RcbiJdfQ== */\\n/*@ sourceURL=/Users/rjshoemaker/Documents/code/practice/nextjs-postgres-prisma/blogr-nextjs-prisma/pages/p/[id].tsx */\"));\n};\n\nexport default Post;","map":{"version":3,"sources":["/Users/rjshoemaker/Documents/code/practice/nextjs-postgres-prisma/blogr-nextjs-prisma/pages/p/[id].tsx"],"names":["React","ReactMarkdown","Layout","prisma","Router","useSession","getServerSideProps","params","post","findUnique","where","id","Number","include","author","select","name","props","publishPost","fetch","method","push","Post","session","loading","userHasValidSession","Boolean","postBelongsToUser","user","email","console","log","published","title","content"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,MAAMC,kBAAsC,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAsB;AAC1E,QAAMC,IAAI,GAAG,MAAML,MAAM,CAACK,IAAP,CAAYC,UAAZ,CAAuB;AACxCC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,EAAE,EAAEC,MAAM,CAACL,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEI,EAAT,CAAN,IAAsB,CAAC;AAA7B,KADiC;AAExCE,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR;AADF;AADD;AAF+B,GAAvB,CAAnB;AAQA,SAAO;AACLC,IAAAA,KAAK,EAAET;AADF,GAAP;AAGD,CAZM;;AAcP,eAAeU,WAAf,CAA2BP,EAA3B,EAAsD;AACpD,QAAMQ,KAAK,CAAC,yCAAD,EAA4C;AACrDC,IAAAA,MAAM,EAAE;AAD6C,GAA5C,CAAX;AAIA,QAAMhB,MAAM,CAACiB,IAAP,CAAY,GAAZ,CAAN;AACD;;AAED,MAAMC,IAAyB,GAAIL,KAAD,IAAW;AAAA;;AAC3C,QAAM,CAACM,OAAD,EAAUC,OAAV,IAAqBnB,UAAU,EAArC;;AACA,MAAImB,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAP;AACD;;AACD,QAAMC,mBAAmB,GAAGC,OAAO,CAACH,OAAD,CAAnC;AACA,QAAMI,iBAAiB,GAAG,CAAAJ,OAAO,SAAP,IAAAA,OAAO,WAAP,6BAAAA,OAAO,CAAEK,IAAT,gEAAeC,KAAf,wBAAyBZ,KAAK,CAACH,MAA/B,kDAAyB,cAAce,KAAvC,CAA1B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,CAACd,KAAK,CAACe,SAAnB,EAA8BP,mBAA9B,EAAmDE,iBAAnD;AAEA,MAAIM,KAAK,GAAGhB,KAAK,CAACgB,KAAlB;;AACA,MAAI,CAAChB,KAAK,CAACe,SAAX,EAAsB;AACpBC,IAAAA,KAAK,GAAI,GAAEA,KAAM,UAAjB;AACD;;AAED,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAO,CAAAhB,KAAK,SAAL,IAAAA,KAAK,WAAL,8BAAAA,KAAK,CAAEH,MAAP,kEAAeE,IAAf,KAAuB,gBAA9B,CAFF,EAGE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEC,KAAK,CAACiB,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIG,CAACjB,KAAK,CAACe,SAAP,IAAoBP,mBAApB,IAA2CE,iBAA3C,IACC;AAAQ,IAAA,OAAO,EAAE,MAAMT,WAAW,CAACD,KAAK,CAACN,EAAP,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALJ,CADF;AAAA;AAAA;AAAA,8lHADF;AAiCD,CAhDD;;AAkDA,eAAeW,IAAf","sourcesContent":["import React from 'react'\nimport { GetServerSideProps } from 'next'\nimport ReactMarkdown from 'react-markdown'\nimport Layout from '../../components/Layout'\nimport { PostProps } from '../../components/Post'\nimport prisma from '../../lib/prisma'\nimport Router from 'next/router'\nimport { useSession } from 'next-auth/client'\n\nexport const getServerSideProps: GetServerSideProps = async ({ params }) => {\n  const post = await prisma.post.findUnique({\n    where: { id: Number(params?.id) || -1 },\n    include: {\n      author: {\n        select: { name: true }\n      }\n    }\n  })\n  return {\n    props: post\n  }\n}\n\nasync function publishPost(id: number): Promise<void> {\n  await fetch('http://localhost:3000/api/publish/${id}', {\n    method: 'PUT'\n  })\n\n  await Router.push('/')\n}\n\nconst Post: React.FC<PostProps> = (props) => {\n  const [session, loading] = useSession()\n  if (loading) {\n    return <div>Authenticating...</div>\n  }\n  const userHasValidSession = Boolean(session)\n  const postBelongsToUser = session?.user?.email === props.author?.email\n\n  console.log(!props.published, userHasValidSession, postBelongsToUser)\n\n  let title = props.title\n  if (!props.published) {\n    title = `${title} (Draft)`\n  }\n\n  return (\n    <Layout>\n      <div>\n        <h2>{title}</h2>\n        <p>By {props?.author?.name || 'Unknown author'}</p>\n        <ReactMarkdown source={props.content} />\n        {!props.published && userHasValidSession && postBelongsToUser && (\n          <button onClick={() => publishPost(props.id)}>Publish</button>\n        )}\n      </div>\n      <style jsx>{`\n        .page {\n          background: white;\n          padding: 2rem;\n        }\n\n        .actions {\n          margin-top: 2rem;\n        }\n\n        button {\n          background: #ececec;\n          border: 0;\n          border-radius: 0.125rem;\n          padding: 1rem 2rem;\n        }\n\n        button + button {\n          margin-left: 1rem;\n        }\n      `}</style>\n    </Layout>\n  )\n}\n\nexport default Post\n"]},"metadata":{},"sourceType":"module"}